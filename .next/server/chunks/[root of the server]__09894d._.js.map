{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://D%3A/projects/git/Logical%20web/Nextjs/RentalApp/real_state/src/app/api/register/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { z } from \"zod\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Schema validation for registration\r\nconst registerSchema = z.object({\r\n  name: z.string().min(2, { message: \"نام باید حداقل 2 کاراکتر باشد\" }),\r\n  email: z.string().email({ message: \"ایمیل نامعتبر است\" }),\r\n  password: z.string().min(6, { message: \"رمز عبور باید حداقل 6 کاراکتر باشد\" }),\r\n  role: z.enum([\"tenant\", \"manager\", \"owner\"], {\r\n    message: \"نقش باید یکی از مقادیر tenant، manager یا owner باشد\",\r\n  }),\r\n});\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    \r\n    // Validate input data\r\n    const result = registerSchema.safeParse(body);\r\n    if (!result.success) {\r\n      return NextResponse.json(\r\n        { message: result.error.errors[0].message },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const { name, email, password, role } = body;\r\n\r\n    // Check if user already exists\r\n    const existingUser = await prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n\r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { message: \"این ایمیل قبلاً ثبت شده است\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Create user\r\n    const user = await prisma.tenant.create({\r\n      data: {\r\n        name,\r\n        email,\r\n        password: hashedPassword,\r\n        role,\r\n      },\r\n    });\r\n\r\n    // Remove password from response\r\n    const { password: _, ...userWithoutPassword } = user;\r\n\r\n    return NextResponse.json(\r\n      { message: \"ثبت‌نام با موفقیت انجام شد\", user: userWithoutPassword },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Registration error:\", error);\r\n    return NextResponse.json(\r\n      { message: \"خطا در ثبت‌نام. لطفا دوباره تلاش کنید\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,qCAAqC;AACrC,MAAM,iBAAiB,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,MAAM,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAgC;IACnE,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAAoB;IACvD,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAqC;IAC5E,MAAM,sIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;QAAW;KAAQ,EAAE;QAC3C,SAAS;IACX;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,sBAAsB;QACtB,MAAM,SAAS,eAAe,SAAS,CAAC;QACxC,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS,OAAO,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO;YAAC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG;QAExC,+BAA+B;QAC/B,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA8B,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,cAAc;QACd,MAAM,OAAO,MAAM,OAAO,MAAM,CAAC,MAAM,CAAC;YACtC,MAAM;gBACJ;gBACA;gBACA,UAAU;gBACV;YACF;QACF;QAEA,gCAAgC;QAChC,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA8B,MAAM;QAAoB,GACnE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwC,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}