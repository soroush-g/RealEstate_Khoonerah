{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://D%3A/projects/git/Logical%20web/Nextjs/RentalApp/real_state/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nconst handler = NextAuth({\r\n  adapter: PrismaAdapter(prisma),\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        // بررسی در جدول Manager\r\n        const manager = await prisma.manager.findUnique({\r\n          where: { email: credentials.email },\r\n        });\r\n\r\n        if (manager && manager.password) {\r\n          const isPasswordValid = await bcrypt.compare(\r\n            credentials.password,\r\n            manager.password\r\n          );\r\n\r\n          if (isPasswordValid) {\r\n            return {\r\n              id: manager.id,\r\n              name: manager.name,\r\n              email: manager.email,\r\n              role: \"manager\",\r\n            };\r\n          }\r\n        }\r\n\r\n        // بررسی در جدول Tenant\r\n        const tenant = await prisma.tenant.findUnique({\r\n          where: { email: credentials.email },\r\n        });\r\n\r\n        if (tenant && tenant.password) {\r\n          const isPasswordValid = await bcrypt.compare(\r\n            credentials.password,\r\n            tenant.password\r\n          );\r\n\r\n          if (isPasswordValid) {\r\n            return {\r\n              id: tenant.id,\r\n              name: tenant.name,\r\n              email: tenant.email,\r\n              role: \"tenant\",\r\n            };\r\n          }\r\n        }\r\n\r\n        return null;\r\n      },\r\n    }),\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n        token.role = user.role;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token && session.user) {\r\n        session.user.id = token.id as string;\r\n        session.user.role = token.role as \"manager\" | \"tenant\";\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/signin\",\r\n    signUp: \"/signup\",\r\n    error: \"/signin\",\r\n  },\r\n});\r\n\r\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,wBAAwB;gBACxB,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,UAAU,CAAC;oBAC9C,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC;gBAEA,IAAI,WAAW,QAAQ,QAAQ,EAAE;oBAC/B,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,QAAQ,QAAQ;oBAGlB,IAAI,iBAAiB;wBACnB,OAAO;4BACL,IAAI,QAAQ,EAAE;4BACd,MAAM,QAAQ,IAAI;4BAClB,OAAO,QAAQ,KAAK;4BACpB,MAAM;wBACR;oBACF;gBACF;gBAEA,uBAAuB;gBACvB,MAAM,SAAS,MAAM,OAAO,MAAM,CAAC,UAAU,CAAC;oBAC5C,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC;gBAEA,IAAI,UAAU,OAAO,QAAQ,EAAE;oBAC7B,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,OAAO,QAAQ;oBAGjB,IAAI,iBAAiB;wBACnB,OAAO;4BACL,IAAI,OAAO,EAAE;4BACb,MAAM,OAAO,IAAI;4BACjB,OAAO,OAAO,KAAK;4BACnB,MAAM;wBACR;oBACF;gBACF;gBAEA,OAAO;YACT;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;QACR,QAAQ;QACR,OAAO;IACT;AACF"}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}