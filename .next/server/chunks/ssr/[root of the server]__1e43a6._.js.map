{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://D%3A/projects/git/Logical%20web/Nextjs/TodoApp/todo_app/src/components/form/Form.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { formProps } from \"@/types\";\r\nimport { useRef } from \"react\";\r\n\r\nfunction Form({ children, action, className, onSubmit }: formProps) {\r\n  const ref = useRef<HTMLFormElement>(null);\r\n\r\n  return (\r\n    <form\r\n      action={async (formData) => {\r\n        await action(formData);\r\n        ref.current?.reset();\r\n      }}\r\n      onSubmit={onSubmit}\r\n      ref={ref}\r\n      className={className}\r\n    >\r\n      {children}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAKA,SAAS,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAa;IAChE,MAAM,MAAM,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAmB;IAEpC,qBACE,8OAAC;QACC,QAAQ,OAAO;YACb,MAAM,OAAO;YACb,IAAI,OAAO,EAAE;QACf;QACA,UAAU;QACV,KAAK;QACL,WAAW;kBAEV;;;;;;AAGP;uCAEe"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://D%3A/projects/git/Logical%20web/Nextjs/TodoApp/todo_app/src/components/button/Button.tsx"],"sourcesContent":["import { buttonProps } from \"@/types\";\r\nimport clsx from \"clsx\";\r\n\r\nfunction Button({ type, text, onClick, actionButton, bgColor }: buttonProps) {\r\n  return (\r\n    <button\r\n      className={clsx(\r\n        \"transition-all duration-300 rounded-lg text-sm px-5 py-2.5 font-medium\",\r\n        actionButton\r\n          ? \"text-white hover:scale-105 focus:outline-none focus:ring-4\"\r\n          : \"bg-gray-700 text-white hover:bg-gray-800\",\r\n        bgColor && `${bgColor} hover:brightness-110`\r\n      )}\r\n      onClick={onClick}\r\n      type={type}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n"],"names":[],"mappings":";;;;AACA;;;AAEA,SAAS,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAe;IACzE,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,0EACA,eACI,+DACA,4CACJ,WAAW,GAAG,QAAQ,qBAAqB,CAAC;QAE9C,SAAS;QACT,MAAM;kBAEL;;;;;;AAGP;uCAEe"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file://D%3A/projects/git/Logical%20web/Nextjs/TodoApp/todo_app/src/components/input/Input.tsx"],"sourcesContent":["import { inputProps } from \"@/types\";\r\n\r\nfunction Input({ name, type, placeholder, value }: inputProps) {\r\n  return (\r\n    <input\r\n      name={name}\r\n      type={type}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      className=\"block w-full p-3 border rounded-lg text-base bg-gray-900 border-gray-700 placeholder-gray-500 text-white focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default Input;\r\n"],"names":[],"mappings":";;;;;AAEA,SAAS,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAc;IAC3D,qBACE,8OAAC;QACC,MAAM;QACN,MAAM;QACN,aAAa;QACb,OAAO;QACP,WAAU;;;;;;AAGhB;uCAEe"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file://D%3A/projects/git/Logical%20web/Nextjs/TodoApp/todo_app/src/actions/index.tsx"],"sourcesContent":["\"use server\";\r\n\r\nimport { prisma } from \"@/utils/prisma\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nexport async function createTodo(formData: FormData) {\r\n    const input = formData.get('input') as string;\r\n    if(!input.trim()) {\r\n        return;\r\n    }\r\n\r\n    await prisma.todo.create({\r\n        data: {\r\n            title: input,\r\n        }\r\n    })\r\n\r\n    revalidatePath(\"/\");\r\n}\r\n\r\nexport async function changeStatus(formData: FormData) {\r\n   const inputId = formData.get(\"inputId\") as string;\r\n   const todo = await prisma.todo.findUnique({\r\n    where: {\r\n        id: inputId,\r\n    },\r\n   });\r\n\r\n   const updatedStatus = !todo?.isCompleted;\r\n\r\n   await prisma.todo.update({\r\n    where:{\r\n        id: inputId,\r\n    },\r\n    data:{\r\n        isCompleted: updatedStatus,\r\n    },\r\n   });\r\n\r\n   revalidatePath(\"/\");\r\n}\r\n\r\nexport async function editTodo(formData: FormData) {\r\n    const newTitle = formData.get(\"newTitle\") as string;\r\n    const inputId = formData.get(\"inputId\") as string;\r\n\r\n    await prisma.todo.update({\r\n        where: {\r\n            id: inputId,\r\n        },\r\n        data: {\r\n            title: newTitle,\r\n        }\r\n    })\r\n\r\n    revalidatePath(\"/\");\r\n}\r\n\r\nexport async function deleteTodo(formData: FormData) {\r\n    const inputId = formData.get(\"inputId\") as string;\r\n\r\n    await prisma.todo.delete({\r\n        where: {\r\n            id: inputId,\r\n        },\r\n    });\r\n\r\n    revalidatePath(\"/\");\r\n}"],"names":[],"mappings":";;;;;;;;IAKsB;IAeA;IAsBA;IAgBA"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file://D%3A/projects/git/Logical%20web/Nextjs/TodoApp/todo_app/src/components/todos/EditTodo.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport Button from \"../button/Button\";\r\nimport { MdEdit } from \"react-icons/md\";\r\nimport Form from \"../form/Form\";\r\nimport Input from \"../input/Input\";\r\nimport { todoProps } from \"@/types\";\r\nimport * as actions from \"@/actions\";\r\n\r\nfunction EditTodo({ todo }: { todo: todoProps }) {\r\n  const [editTodoState, setEditTodoState] = useState(false);\r\n\r\n  const handleEdit = () => {\r\n    setEditTodoState(!editTodoState);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    setEditTodoState(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-3 items-center\">\r\n      <Button onClick={handleEdit} text={<MdEdit />} actionButton />\r\n      {editTodoState ? (\r\n        <Form action={actions.editTodo} onSubmit={handleSubmit}>\r\n          <Input name=\"inputId\" value={todo.id} type=\"hidden\" />\r\n          <div className=\"flex gap-2\">\r\n            <Input name=\"newTitle\" type=\"text\" placeholder=\"ÙˆÛŒØ±Ø§ÛŒØ´ ÛŒØ§Ø¯Ø¯Ø§Ø´Øª\" />\r\n            <Button type=\"submit\" text=\"Ø°Ø®ÛŒØ±Ù‡\" bgColor=\"bg-yellow-500\" />\r\n          </div>\r\n        </Form>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditTodo;\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AACA;AAEA;AAJA;AAJA;;;;;;;;AAUA,SAAS,SAAS,EAAE,IAAI,EAAuB;IAC7C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,MAAM,aAAa;QACjB,iBAAiB,CAAC;IACpB;IAEA,MAAM,eAAe;QACnB,iBAAiB;IACnB;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,sIAAA,CAAA,UAAM;gBAAC,SAAS;gBAAY,oBAAM,8OAAC,8IAAA,CAAA,SAAM;;;;;gBAAK,YAAY;;;;;;YAC1D,8BACC,8OAAC,kIAAA,CAAA,UAAI;gBAAC,QAAQ,yHAAQ,QAAQ;gBAAE,UAAU;;kCACxC,8OAAC,oIAAA,CAAA,UAAK;wBAAC,MAAK;wBAAU,OAAO,KAAK,EAAE;wBAAE,MAAK;;;;;;kCAC3C,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,oIAAA,CAAA,UAAK;gCAAC,MAAK;gCAAW,MAAK;gCAAO,aAAY;;;;;;0CAC/C,8OAAC,sIAAA,CAAA,UAAM;gCAAC,MAAK;gCAAS,MAAK;gCAAQ,SAAQ;;;;;;;;;;;;;;;;;uBAG7C;;;;;;;AAGV;uCAEe"}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file://D%3A/projects/git/Logical%20web/Nextjs/TodoApp/todo_app/src/app/darkModeToggle.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction DarkModeToggle() {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n  // Ú†Ú© Ú©Ø±Ø¯Ù† Ø­Ø§Ù„Øª Ù‚Ø¨Ù„ÛŒ Ø¯Ø± localStorage\r\n  useEffect(() => {\r\n    const savedMode = localStorage.getItem(\"darkMode\");\r\n    if (savedMode === \"enabled\") {\r\n      setIsDarkMode(true);\r\n      document.body.classList.add(\"dark\");\r\n    } else {\r\n      setIsDarkMode(false);\r\n      document.body.classList.remove(\"dark\");\r\n    }\r\n  }, []);\r\n\r\n  // ØªØºÛŒÛŒØ± ÙˆØ¶Ø¹ÛŒØª Ø¯Ø§Ø±Ú© Ù…ÙˆØ¯\r\n  const toggleDarkMode = () => {\r\n    setIsDarkMode(!isDarkMode);\r\n    if (!isDarkMode) {\r\n      document.body.classList.add(\"dark\");\r\n      localStorage.setItem(\"darkMode\", \"enabled\");\r\n    } else {\r\n      document.body.classList.remove(\"dark\");\r\n      localStorage.setItem(\"darkMode\", \"disabled\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      onClick={toggleDarkMode}\r\n      className=\"fixed top-5 right-5 p-3 bg-yellow-400 dark:bg-yellow-600 text-white rounded-full transition duration-300\"\r\n    >\r\n      {isDarkMode ? \"ðŸŒ™\" : \"ðŸŒž\"}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default DarkModeToggle;\r\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIA,SAAS;IACP,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,oCAAoC;IACpC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,YAAY,aAAa,OAAO,CAAC;QACvC,IAAI,cAAc,WAAW;YAC3B,cAAc;YACd,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;QAC9B,OAAO;YACL,cAAc;YACd,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QACjC;IACF,GAAG,EAAE;IAEL,uBAAuB;IACvB,MAAM,iBAAiB;QACrB,cAAc,CAAC;QACf,IAAI,CAAC,YAAY;YACf,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;YAC5B,aAAa,OAAO,CAAC,YAAY;QACnC,OAAO;YACL,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAC/B,aAAa,OAAO,CAAC,YAAY;QACnC;IACF;IAEA,qBACE,8OAAC;QACC,SAAS;QACT,WAAU;kBAET,aAAa,OAAO;;;;;;AAG3B;uCAEe"}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}